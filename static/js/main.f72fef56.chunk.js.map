{"version":3,"sources":["redux/actions.js","components/todo-load/todo-load.js","components/todo-load/index.js","components/todo-add-empty-task-modal/todo-add-empty-task-modal.js","components/todo-add/todo-add.js","components/todo-add/index.js","components/todo-list-item/todo-list-item.js","components/todo-list-item/index.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/delete-confirmation-modal/delete-confirmation-modal.js","components/todo-list-item-important/todo-list-item-important.js","components/important-tasks/important-tasks.js","components/app/App.js","components/app/index.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["todoDone","todoId","dispatch","type","payload","todoImportant","todoEdit","args","todoTaskConfirmDelete","task","todoMoveUp","todoMoveDown","mapDispatchToProps","clearList","loadExternalTasks","axios","get","then","response","data","catch","error","console","log","TodoLoad","connect","state","todoList","props","className","length","onClick","TodoAddEmptyTaskModal","Modal","isOpen","isEmptyTask","toggle","onSubmit","ModalHeader","ModalBody","ModalFooter","Button","todoAdd","name","TodoAdd","useState","setName","isEmpty","setIsEmpty","onChange","e","target","value","placeholder","done","important","edit","deleteTaskInfo","TodoListItem","check","todo","todoName","newName","setNewName","isDone","isImportant","disabled","isDisabledButtonUp","isDisabledButtonDown","isEdit","autoFocus","id","TodoList","map","el","key","todoDelete","deleteAll","todoTaskDeleteCancel","todoTaskForDelete","deleteAllTasksConfirmed","clearTodoList","modal","deleteConfirmationModal","Boolean","header","body","color","filter","ToDo","align","App","to","path","window","location","hostname","match","initialState","reducer","action","disabledLastButtonDown","getRandomInt","title","completed","up","down","min","max","Math","ceil","floor","random","idx","findIndex","newList","splice","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f72fef56.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport function todoListAddExternal() {\r\n    return (dispatch) => {\r\n        axios.get('https://jsonplaceholder.typicode.com/todos')\r\n            .then((response) => {\r\n                dispatch({type: 'TODO_LOAD', payload: response.data});\r\n                // console.log(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n}\r\n\r\nexport function todoDone(todoId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_DONE', payload: todoId})\r\n    }\r\n}\r\n\r\nexport function todoImportant(todoId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_IMPORTANT', payload: todoId})\r\n    }\r\n}\r\n\r\nexport function todoEdit(args) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_EDIT', payload: args})\r\n    }\r\n}\r\n\r\nexport function todoAdd(name) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_ADD', payload: name})\r\n    }\r\n}\r\n\r\nexport function todoTaskConfirmDelete(task) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_TASK_CONFIRM_DELETE', payload: task})\r\n    }\r\n}\r\n\r\nexport function todoDelete(args) {\r\n    if (args.deleteAll) {\r\n        return (dispatch) => {\r\n            dispatch({type: 'TODO_TASK_DELETE_ALL', payload: args.deleteAll});\r\n        }\r\n    } else {\r\n        return (dispatch) => {\r\n            dispatch({type: 'TODO_TASK_DELETE', payload: args.id});\r\n        }\r\n    }\r\n}\r\n\r\nexport function todoTaskDeleteCancel() {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_TASK_DELETE_CANCEL'})\r\n    }\r\n}\r\n\r\nexport function todoListConfirmDeleteAll() {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_LIST_CONFIRM_DELETE_ALL'})\r\n    }\r\n}\r\n\r\nexport function todoMoveUp(todoId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_UP', payload: todoId})\r\n    }\r\n}\r\nexport function todoMoveDown(todoId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_DOWN', payload: todoId})\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {todoListConfirmDeleteAll, todoListAddExternal} from \"../../redux/actions\";\r\n\r\n\r\nconst TodoLoad = (props) => {\r\n    return (\r\n        <div>\r\n            <div className=\"card  m-2 border-0\">\r\n                <div className='card-body p-0 '>\r\n                    <div className='d-flex flex-row justify-content-start align-items-center'>\r\n                        <div className='col-sm-1 pl-0 '>\r\n                            <strong>Total:</strong>\r\n                        </div>\r\n                        <div className='col-sm-2 d-flex pl-0'>\r\n                            {props.todoList.length}\r\n                        </div>\r\n                        <div className='col-sm-2.5 align-items-center'>\r\n                            <button className='col-sm btn btn-warning'\r\n                            onClick={props.loadExternalTasks}>\r\n                                Add external list\r\n                            </button>\r\n                        </div>\r\n                        <div className='col-sm-2 align-items-center'>\r\n                            <button className='col-sm btn btn-danger '\r\n                            onClick={props.clearList}>\r\n                                Clear list\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    clearList: todoListConfirmDeleteAll,\r\n    loadExternalTasks: todoListAddExternal,\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoLoad);\r\n","import TodoLoad from \"./todo-load\";\r\n\r\nexport default TodoLoad;","import React from \"react\";\r\nimport './todo-add-empty-task-modal.css'\r\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Button} from \"reactstrap\";\r\n\r\nconst TodoAddEmptyTaskModal = (props) => {\r\n\r\n    return (\r\n        <Modal isOpen={props.isEmptyTask} toggle={props.onSubmit}>\r\n            <ModalHeader className='text-danger'>Task is empty</ModalHeader>\r\n            <ModalBody>\r\n                Please add your task\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    onClick={props.onSubmit}\r\n                    >Ok</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n};\r\n\r\nexport default TodoAddEmptyTaskModal;","import React, {useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {todoAdd} from \"../../redux/actions\";\r\nimport TodoAddEmptyTaskModal from \"../todo-add-empty-task-modal/todo-add-empty-task-modal\";\r\n\r\nconst TodoAdd = (props) => {\r\n\r\n    const [name,setName]=useState('');\r\n    const [isEmpty,setIsEmpty]=useState(false);\r\n\r\n    const onSubmit=(name)=>{\r\n        if (name===''){\r\n            setIsEmpty(true);\r\n        }else {\r\n            props.todoAdd(name);\r\n            setIsEmpty(false);\r\n            setName('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card  m-2\">\r\n                <div className='card-body p-0'>\r\n                    <div className='d-flex flex-row justify-content-end align-items-center'>\r\n                        <div className='col-sm-9 '>\r\n                            <input className='input-group border-0'\r\n                            onChange={e=>setName(e.target.value)}\r\n                            value={name}\r\n                            placeholder='add new task'/>\r\n                        </div>\r\n                        <div className='col-sm-2 align-items-center pr-1'>\r\n                            <button className='col-sm btn btn-success '\r\n                                    onClick={()=>onSubmit(name)}>\r\n                                Add\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <TodoAddEmptyTaskModal isEmptyTask={isEmpty} onSubmit={()=>setIsEmpty(false)}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    todoAdd: todoAdd,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoAdd);","import TodoAdd from \"./todo-add\";\r\n\r\nexport default TodoAdd;","import React, {useState} from \"react\";\r\nimport './todo-list-item.css'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    todoDone,\r\n    todoEdit,\r\n    todoImportant,\r\n    todoMoveDown,\r\n    todoMoveUp,\r\n    todoTaskConfirmDelete\r\n} from \"../../redux/actions\";\r\n\r\nconst TodoListItem = (props) => {\r\n    const todo = props.todo;\r\n    const [newName, setNewName] = useState(todo.todoName);\r\n\r\n    let check, done, important;\r\n\r\n    if (todo.isDone) {\r\n        check = 'fa-check-circle';\r\n        done = 'done';\r\n    } else {\r\n        check = 'fa-circle';\r\n        done = '';\r\n    }\r\n    if (todo.isImportant) {\r\n        important = 'important';\r\n    } else {\r\n        important = '';\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card  m-2\">\r\n                <div className='card-body p-0'>\r\n                    <div className='d-flex flex-row justify-content-between align-items-center green'>\r\n                        <div className='col-sm-0.5 p-2 position-left'>\r\n                            <i className={`text-success p-2 position-left far ${check}`}></i>\r\n                        </div>\r\n                        <div className='col-sm-0.5 btn-group-vertical btn-sm'>\r\n                            <button className='btn btn-secondary btn-sm'\r\n                                    disabled={todo.isDisabledButtonUp}\r\n                                    onClick={() => props.todoMoveUp(todo.todoId)}>\r\n                                <i className=\"fas fa-sort-up\"></i>\r\n                            </button>\r\n                            <button className='btn btn-secondary btn-sm '\r\n                                    disabled={todo.isDisabledButtonDown}\r\n                                    onClick={() => props.todoMoveDown(todo.todoId)}>\r\n                                <i className=\"fas fa-sort-down\"></i>\r\n                            </button>\r\n                        </div>\r\n                        <div className='col-sm-9 '>\r\n                            {!todo.isEdit && <input type='text'\r\n                                                    className={`form-control border-0 ${done} ${important}`}\r\n                                                    value={todo.todoName}\r\n                                                    disabled={true}/>}\r\n                            {todo.isEdit && <input type='text'\r\n                                                   className={`form-control border-0 ${done} ${important}`}\r\n                                                   value={newName}\r\n                                                   disabled={false}\r\n                                                   onChange={e => setNewName(e.target.value)}\r\n                                                   autoFocus/>}\r\n                        </div>\r\n                        <div className='col-sm-2 d-flex flex-row align-items-center'>\r\n                            <button className='col-sm-3 btn btn-success mr-1'\r\n                                    onClick={() => props.done(todo.todoId)}>\r\n                                <i className=\"far fa-check-square\"></i>\r\n                            </button>\r\n\r\n                            <button className='col-sm-3 btn btn-info mr-1 '\r\n                                    onClick={() => props.edit({\r\n                                        id: todo.todoId,\r\n                                        name: newName\r\n                                    })}>\r\n                                {!todo.isEdit && <i className=\"fas fa-edit\"></i>}\r\n                                {todo.isEdit && <i className=\"far fa-save\"></i>}\r\n                            </button>\r\n                            <button className='col-sm-3 btn btn-danger mr-1'\r\n                                    onClick={() => props.deleteTaskInfo({\r\n                                        id: todo.todoId,\r\n                                        name: todo.todoName\r\n                                    })}>\r\n                                <i className=\"far fa-trash-alt\"></i>\r\n                            </button>\r\n                            <button className='col-sm-3 btn btn-warning'\r\n                                    onClick={() => props.important(todo.todoId)}>\r\n                                <i className=\"fas fa-exclamation\"></i>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    done: todoDone,\r\n    important: todoImportant,\r\n    edit: todoEdit,\r\n    deleteTaskInfo: todoTaskConfirmDelete,\r\n    todoMoveUp: todoMoveUp,\r\n    todoMoveDown: todoMoveDown,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListItem);","import TodoListItem from \"./todo-list-item\";\r\n\r\nexport default TodoListItem;","import TodoList from \"./todo-list\";\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport TodoListItem from \"../todo-list-item\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst TodoList = (props) => {\r\n    return (\r\n        <div>\r\n            {props.todoList.map(el => <TodoListItem key={el.todoId} todo={el}/>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nexport default connect(mapStateToProps,)(TodoList);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Button} from \"reactstrap\";\r\nimport {todoDelete, todoTaskDeleteCancel} from \"../../redux/actions\";\r\n\r\nconst DeleteConfirmationModal = (props) => {\r\n\r\n    return (\r\n        <Modal isOpen={Boolean(props.deleteTaskInfo.name)||props.deleteAllTasksConfirmed} toggle={props.todoTaskDeleteCancel}>\r\n            <ModalHeader className='text-danger'>{props.modal.header}</ModalHeader>\r\n            <ModalBody>\r\n                <strong>{props.deleteTaskInfo.name}</strong> {props.modal.body}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color='danger'\r\n                onClick={()=>props.todoDelete({\r\n                    id: props.deleteTaskInfo.id,\r\n                    deleteAll: props.deleteAllTasksConfirmed\r\n                })}>Delete</Button>\r\n                <Button\r\n                    onClick={props.todoTaskDeleteCancel}>Cancel</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n    deleteTaskInfo: state.todoTaskForDelete,\r\n    deleteAllTasksConfirmed: state.clearTodoList,\r\n    modal: state.deleteConfirmationModal\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    todoDelete: todoDelete,\r\n    todoTaskDeleteCancel: todoTaskDeleteCancel,\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(DeleteConfirmationModal);","import React, {useState} from \"react\";\r\nimport './todo-list-item-important.css'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    todoDone,\r\n    todoEdit,\r\n    todoImportant,\r\n    todoMoveDown,\r\n    todoMoveUp,\r\n    todoTaskConfirmDelete\r\n} from \"../../redux/actions\";\r\nimport DeleteConfirmationModal from \"../delete-confirmation-modal/delete-confirmation-modal\";\r\n\r\nconst TodoListItemImportant = (props) => {\r\n    const todo = props.todo;\r\n    const [newName, setNewName] = useState(todo.todoName);\r\n\r\n    let check, done, important;\r\n\r\n    if (todo.isDone) {\r\n        check = 'fa-check-circle';\r\n        done = 'done';\r\n    } else {\r\n        check = 'fa-circle';\r\n        done = '';\r\n    }\r\n    if (todo.isImportant) {\r\n        important = 'important';\r\n    } else {\r\n        important = '';\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card  m-2\">\r\n                <div className='card-body p-0'>\r\n                    <div className='d-flex flex-row justify-content-between align-items-center green'>\r\n                        <div className='col-sm-0.5 p-2 position-left'>\r\n                            <i className={`text-success p-2 position-left far ${check}`}></i>\r\n                        </div>\r\n                        <div className='col-sm-0.5 btn-group-vertical btn-sm'>\r\n                        </div>\r\n                        <div className='col-sm-9 '>\r\n                            {!todo.isEdit && <input type='text'\r\n                                                    className={`form-control border-0 ${done} ${important}`}\r\n                                                    value={todo.todoName}\r\n                                                    disabled={true}/>}\r\n                            {todo.isEdit && <input type='text'\r\n                                                   className={`form-control border-0 ${done} ${important}`}\r\n                                                   value={newName}\r\n                                                   disabled={false}\r\n                                                   onChange={e => setNewName(e.target.value)}\r\n                                                   autoFocus/>}\r\n                        </div>\r\n                        <div className='col-sm-2 d-flex flex-row align-items-center'>\r\n                            <button className='col-sm-3 btn btn-success mr-1'\r\n                                    onClick={() => props.done(todo.todoId)}>\r\n                                <i className=\"far fa-check-square\"></i>\r\n                            </button>\r\n\r\n                            <button className='col-sm-3 btn btn-info mr-1 '\r\n                                    onClick={() => props.edit({\r\n                                        id: todo.todoId,\r\n                                        name: newName\r\n                                    })}>\r\n                                {!todo.isEdit && <i className=\"fas fa-edit\"></i>}\r\n                                {todo.isEdit && <i className=\"far fa-save\"></i>}\r\n                            </button>\r\n                            <button className='col-sm-3 btn btn-danger mr-1'\r\n                                    onClick={() => props.deleteTaskInfo({\r\n                                        id: todo.todoId,\r\n                                        name: todo.todoName\r\n                                    })}>\r\n                                <i className=\"far fa-trash-alt\"></i>\r\n                            </button>\r\n                            <button className='col-sm-3 btn btn-warning'\r\n                                    onClick={() => props.important(todo.todoId)}>\r\n                                <i className=\"fas fa-exclamation\"></i>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <DeleteConfirmationModal/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    done: todoDone,\r\n    important: todoImportant,\r\n    edit: todoEdit,\r\n    deleteTaskInfo: todoTaskConfirmDelete,\r\n    todoMoveUp: todoMoveUp,\r\n    todoMoveDown: todoMoveDown,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListItemImportant);","import React from \"react\";\r\nimport './important-tasks.css';\r\nimport {connect} from \"react-redux\";\r\n// import TodoListItem from \"../todo-list-item\";\r\nimport TodoListItemImportant from \"../todo-list-item-important/todo-list-item-important\";\r\n\r\nconst ImportantTasks = (props) => {\r\n    return (\r\n        <div className='mt-5'>\r\n            {props.todoList.filter(el=>el.isImportant===true).map(el => <TodoListItemImportant key={el.todoId} todo={el}/>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nexport default connect(mapStateToProps,)(ImportantTasks);","import React from 'react';\nimport './App.css';\nimport TodoLoad from \"../todo-load\";\nimport TodoAdd from \"../todo-add\";\nimport TodoList from \"../todo-list\";\nimport DeleteConfirmationModal from \"../delete-confirmation-modal/delete-confirmation-modal\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport ImportantTasks from \"../important-tasks/important-tasks\";\n\nfunction App() {\n    return (\n        <Router>\n            <nav className='navbar navbar-expand-md navbar-dark fixed-top bg-dark'>\n                <div className=''>\n                    <ul className='nav flex-row'>\n                        <li className='nav-item mr-3'>\n                            <Link to=\"/\">To Do</Link>\n                        </li>\n                        <li className='nav-item'>\n                            <Link to=\"/important\">Important Tasks</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n                    <Switch>\n                        <Route path=\"/important\">\n                            <ImportantTasks className='m-5'/>\n                        </Route>\n                        <Route path=\"/\">\n                            <ToDo/>\n                        </Route>\n                    </Switch>\n\n        </Router>\n    );\n}\n\nexport default App;\n\nfunction ToDo() {\n    return (\n            <div className=\"App\">\n                <br/>\n                <h1 align='left' className='p-2'> To Do List </h1>\n                <TodoLoad/>\n                <TodoAdd/>\n                <TodoList/>\n                <DeleteConfirmationModal/>\n            </div>\n        )\n}\n\n","import App from \"./App\";\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. app is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    todoList: [\r\n        {\r\n            todoId: 201,\r\n            todoName: 'todo 1',\r\n            isDone: false,\r\n            isEdit: false,\r\n            isImportant: false,\r\n            isDisabledButtonUp: true,\r\n            isDisabledButtonDown: false,\r\n        },\r\n        {\r\n            todoId: 202,\r\n            todoName: 'todo 2',\r\n            isDone: false,\r\n            isEdit: false,\r\n            isImportant: true,\r\n            isDisabledButtonUp: false,\r\n            isDisabledButtonDown: false,\r\n        },\r\n        {\r\n            todoId: 203,\r\n            todoName: 'todo 3',\r\n            isDone: false,\r\n            isEdit: false,\r\n            isImportant: false,\r\n            isDisabledButtonUp: false,\r\n            isDisabledButtonDown: false,\r\n        },\r\n        {\r\n            todoId: 204,\r\n            todoName: 'todo 4',\r\n            isDone: false,\r\n            isEdit: false,\r\n            isImportant: false,\r\n            isDisabledButtonUp: false,\r\n            isDisabledButtonDown: true,\r\n        }\r\n    ],\r\n\r\n    deleteConfirmationModal: {header: 'Delete Task', body: ' will be permanently deleted'},\r\n    todoTaskForDelete: {id: '', name: ''},\r\n    clearTodoList: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'TODO_DONE':\r\n            return {\r\n                ...state,\r\n                todoList: [...state.todoList.map(el => {\r\n                    if (el.todoId === action.payload) {\r\n                        return {...el, isDone: !el.isDone}\r\n                    } else\r\n                        return {...el}\r\n                })]\r\n            };\r\n\r\n        case 'TODO_IMPORTANT':\r\n            return {\r\n                ...state,\r\n                todoList: [...state.todoList.map(el => {\r\n                    if (el.todoId === action.payload) {\r\n                        return {...el, isImportant: !el.isImportant}\r\n                    } else\r\n                        return {...el}\r\n                })]\r\n            };\r\n\r\n        case 'TODO_EDIT':\r\n            return {\r\n                ...state,\r\n                todoList: [...state.todoList.map(el => {\r\n                    if (el.todoId === action.payload.id) {\r\n                        return {...el, isEdit: !el.isEdit, todoName: action.payload.name}\r\n                    } else\r\n                        return {...el}\r\n                })]\r\n            };\r\n\r\n        case 'TODO_ADD':\r\n            return {\r\n                ...state,\r\n                // todoList: [...[...state.todoList].map(todo => {\r\n                //             if ([...state.todoList].findIndex(el => el.todoId === todo.todoId) === [...state.todoList].length - 1) {\r\n                //                 return {...todo, isDisabledButtonDown: false}\r\n                //             } else\r\n                //                 return {...todo}\r\n                //         }),\r\n                todoList: [...disabledLastButtonDown([...state.todoList]),\r\n                    {\r\n                        todoId: getRandomInt(204, 1000),\r\n                        todoName: action.payload,\r\n                        isDone: false,\r\n                        isEdit: false,\r\n                        isImportant: false,\r\n                        isDisabledButtonUp: false,\r\n                        isDisabledButtonDown: true\r\n                    }]\r\n            };\r\n        case 'TODO_LOAD':\r\n            return {\r\n                ...state,\r\n                todoList: [...disabledLastButtonDown([...state.todoList]),\r\n                    ...action.payload.map(el => ({\r\n                        todoId: el.id,\r\n                        todoName: el.title,\r\n                        isDone: el.completed,\r\n                        isEdit: false,\r\n                        isImportant: false,\r\n                        isDisabledButtonUp: false,\r\n                        isDisabledButtonDown: false,\r\n                    }))]\r\n            };\r\n\r\n        case\r\n        'TODO_TASK_CONFIRM_DELETE'\r\n        :\r\n            return {\r\n                ...state,\r\n                todoTaskForDelete: action.payload,\r\n                deleteConfirmationModal: initialState.deleteConfirmationModal\r\n            };\r\n\r\n        case\r\n        'TODO_LIST_CONFIRM_DELETE_ALL'\r\n        :\r\n            return {\r\n                ...state,\r\n                clearTodoList: true,\r\n                deleteConfirmationModal: {header: 'Delete Tasks', body: 'All tasks will be permanently deleted'}\r\n            };\r\n\r\n        case\r\n        'TODO_TASK_DELETE'\r\n        :\r\n            return {\r\n                ...state,\r\n                todoList: state.todoList.filter(el => el.todoId !== action.payload),\r\n                todoTaskForDelete: initialState.todoTaskForDelete\r\n            };\r\n\r\n        case\r\n        'TODO_TASK_DELETE_ALL'\r\n        :\r\n            return {\r\n                ...state,\r\n                todoList: [],\r\n                todoTaskForDelete: initialState.todoTaskForDelete,\r\n                clearTodoList: false,\r\n            };\r\n\r\n        case\r\n        'TODO_TASK_DELETE_CANCEL'\r\n        :\r\n            return {\r\n                ...state,\r\n                todoTaskForDelete: initialState.todoTaskForDelete,\r\n                clearTodoList: false\r\n            };\r\n\r\n        case\r\n        'TODO_UP'\r\n        :\r\n            return {\r\n                ...state,\r\n                todoList: up([...state.todoList], action.payload)\r\n            };\r\n\r\n        case\r\n        'TODO_DOWN'\r\n        :\r\n            return {\r\n                ...state,\r\n                todoList: down([...state.todoList], action.payload)\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nfunction up(todoList, id) {\r\n    const idx = todoList.findIndex(el => el.todoId === id);\r\n    if (idx > 0) {\r\n        const newList = [...todoList];\r\n        newList.splice(idx, 1);\r\n        newList.splice(idx - 1, 0, todoList[idx]);\r\n        if (idx === 1) {\r\n            newList[0].isDisabledButtonUp = true;\r\n            newList[1].isDisabledButtonUp = false;\r\n        } else if (idx === newList.length - 1) {\r\n            newList[idx - 1].isDisabledButtonDown = false;\r\n            newList[idx].isDisabledButtonDown = true;\r\n        }\r\n        return newList\r\n    }\r\n}\r\n\r\nfunction down(todoList, id) {\r\n    const idx = todoList.findIndex(el => el.todoId === id);\r\n    if (idx < todoList.length - 1) {\r\n        const newList = [...todoList];\r\n        newList.splice(idx, 1);\r\n        newList.splice(idx + 1, 0, todoList[idx]);\r\n        if (idx === 0) {\r\n            newList[0].isDisabledButtonUp = true;\r\n            newList[1].isDisabledButtonUp = false;\r\n        } else if (idx === newList.length - 2) {\r\n            newList[idx].isDisabledButtonDown = false;\r\n            newList[idx + 1].isDisabledButtonDown = true;\r\n        }\r\n        return newList\r\n    }\r\n}\r\n\r\nfunction disabledLastButtonDown(todoList) {\r\n    return todoList.map(todo => {\r\n        if (todoList.findIndex(el => el.todoId === todo.todoId) === todoList.length - 1) {\r\n            return {...todo, isDisabledButtonDown: false}\r\n        } else\r\n            return {...todo}\r\n    });\r\n}\r\n","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/app\";\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}