{"version":3,"sources":["redux/actions.js","components/todo-load/todo-load.js","components/todo-load/index.js","components/todo-add-empty-task-modal/todo-add-empty-task-modal.js","components/todo-add/todo-add.js","components/todo-add/index.js","components/todo-list-item/todo-list-item.js","components/todo-list-item/index.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/delete-confirmation-modal/delete-confirmation-modal.js","components/todo-list-item-important/todo-list-item-important.js","components/important-tasks/important-tasks.js","components/app/App.js","components/app/index.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["todoDone","todoId","dispatch","type","payload","todoImportant","todoEdit","args","todoUndoEdit","todoTaskConfirmDelete","task","mapDispatchToProps","clearList","loadExternalTasks","axios","get","then","response","data","catch","error","console","log","TodoLoad","connect","state","todoList","props","className","length","onClick","TodoAddEmptyTaskModal","Modal","isOpen","isEmptyTask","toggle","onSubmit","ModalHeader","ModalBody","ModalFooter","Button","todoAdd","name","TodoAdd","useState","setName","isEmpty","setIsEmpty","onChange","e","target","value","placeholder","done","important","edit","undo","deleteTaskInfo","todoMoveUp","todoMoveDown","TodoListItem","check","success","warning","todo","todoName","newName","setNewName","isDone","isImportant","disabled","isDisabledButtonUp","isDisabledButtonDown","isEdit","autoFocus","id","TodoList","map","el","key","todoDelete","deleteAll","todoTaskDeleteCancel","todoTaskForDelete","deleteAllTasksConfirmed","clearTodoList","modal","deleteConfirmationModal","Boolean","header","body","color","filter","ToDo","align","App","to","path","window","location","hostname","match","initialState","reducer","action","disabledLastButtonDown","getRandomInt","newList","title","completed","up","down","min","max","Math","ceil","floor","random","idx","findIndex","splice","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1c038639.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport function todoListAddExternal() {\r\n    return (dispatch) => {\r\n        axios.get('https://jsonplaceholder.typicode.com/todos')\r\n            .then((response) => {\r\n                dispatch({type: 'TODO_LOAD', payload: response.data});\r\n                // console.log(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n}\r\n\r\nexport function todoDone(todoId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_DONE', payload: todoId})\r\n    }\r\n}\r\n\r\nexport function todoImportant(todoId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_IMPORTANT', payload: todoId})\r\n    }\r\n}\r\n\r\nexport function todoEdit(args) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_EDIT', payload: args})\r\n    }\r\n}\r\n\r\nexport function todoUndoEdit(todoId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_UNDO_EDIT', payload: todoId})\r\n    }\r\n}\r\nexport function todoAdd(name) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_ADD', payload: name})\r\n    }\r\n}\r\n\r\nexport function todoTaskConfirmDelete(task) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_TASK_CONFIRM_DELETE', payload: task})\r\n    }\r\n}\r\n\r\nexport function todoDelete(args) {\r\n    if (args.deleteAll) {\r\n        return (dispatch) => {\r\n            dispatch({type: 'TODO_TASK_DELETE_ALL', payload: args.deleteAll});\r\n        }\r\n    } else {\r\n        return (dispatch) => {\r\n            dispatch({type: 'TODO_TASK_DELETE', payload: args.id});\r\n        }\r\n    }\r\n}\r\n\r\nexport function todoTaskDeleteCancel() {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_TASK_DELETE_CANCEL'})\r\n    }\r\n}\r\n\r\nexport function todoListConfirmDeleteAll() {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_LIST_CONFIRM_DELETE_ALL'})\r\n    }\r\n}\r\n\r\nexport function todoMoveUp(todoId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_UP', payload: todoId})\r\n    }\r\n}\r\nexport function todoMoveDown(todoId) {\r\n    return (dispatch) => {\r\n        dispatch({type: 'TODO_DOWN', payload: todoId})\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {todoListConfirmDeleteAll, todoListAddExternal} from \"../../redux/actions\";\r\n\r\n\r\nconst TodoLoad = (props) => {\r\n    return (\r\n        <div>\r\n            <div className=\"card  m-2 border-0\">\r\n                <div className='card-body p-0 '>\r\n                    <div className='d-flex flex-row justify-content-start align-items-center'>\r\n                        <div className='col-sm-1 pl-0 '>\r\n                            <strong>Total:</strong>\r\n                        </div>\r\n                        <div className='col-sm-2 d-flex pl-0'>\r\n                            {props.todoList.length}\r\n                        </div>\r\n                        <div className='col-sm-2.5 align-items-center'>\r\n                            <button className='col-sm btn btn-warning'\r\n                            onClick={props.loadExternalTasks}>\r\n                                Add external list\r\n                            </button>\r\n                        </div>\r\n                        <div className='col-sm-2 align-items-center'>\r\n                            <button className='col-sm btn btn-danger '\r\n                            onClick={props.clearList}>\r\n                                Clear list\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    clearList: todoListConfirmDeleteAll,\r\n    loadExternalTasks: todoListAddExternal,\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoLoad);\r\n","import TodoLoad from \"./todo-load\";\r\n\r\nexport default TodoLoad;","import React from \"react\";\r\nimport './todo-add-empty-task-modal.css'\r\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Button} from \"reactstrap\";\r\n\r\nconst TodoAddEmptyTaskModal = (props) => {\r\n\r\n    return (\r\n        <Modal isOpen={props.isEmptyTask} toggle={props.onSubmit}>\r\n            <ModalHeader className='text-danger'>Task is empty</ModalHeader>\r\n            <ModalBody>\r\n                Please add your task\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button\r\n                    onClick={props.onSubmit}\r\n                    >Ok</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n};\r\n\r\nexport default TodoAddEmptyTaskModal;","import React, {useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {todoAdd} from \"../../redux/actions\";\r\nimport TodoAddEmptyTaskModal from \"../todo-add-empty-task-modal/todo-add-empty-task-modal\";\r\n\r\nconst TodoAdd = (props) => {\r\n\r\n    const [name,setName]=useState('');\r\n    const [isEmpty,setIsEmpty]=useState(false);\r\n\r\n    const onSubmit=(name)=>{\r\n        if (name===''){\r\n            setIsEmpty(true);\r\n        }else {\r\n            props.todoAdd(name);\r\n            setIsEmpty(false);\r\n            setName('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card  m-2\">\r\n                <div className='card-body p-0'>\r\n                    <div className='d-flex flex-row justify-content-end align-items-center'>\r\n                        <div className='col-sm-9 '>\r\n                            <input className='input-group border-0'\r\n                            onChange={e=>setName(e.target.value)}\r\n                            value={name}\r\n                            placeholder='add new task'/>\r\n                        </div>\r\n                        <div className='col-sm-2 align-items-center pr-1'>\r\n                            <button className='col-sm btn btn-success '\r\n                                    onClick={()=>onSubmit(name)}>\r\n                                Add\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <TodoAddEmptyTaskModal isEmptyTask={isEmpty} onSubmit={()=>setIsEmpty(false)}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    todoAdd: todoAdd,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoAdd);","import TodoAdd from \"./todo-add\";\r\n\r\nexport default TodoAdd;","import React, {useState} from \"react\";\r\nimport './todo-list-item.css'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    todoDone,\r\n    todoEdit,\r\n    todoImportant,\r\n    todoMoveDown,\r\n    todoMoveUp,\r\n    todoTaskConfirmDelete, todoUndoEdit\r\n} from \"../../redux/actions\";\r\n\r\nconst TodoListItem = (props) => {\r\n    const todo = props.todo;\r\n    const [newName, setNewName] = useState(todo.todoName);\r\n\r\n    let check, done, important, success, warning;\r\n    console.log('todo.isDone ',todo.isDone);\r\n    if (todo.isDone) {\r\n        check = 'fa-check-circle';\r\n        done = 'done';\r\n        success = ' success';\r\n        console.log('success=',success);\r\n    } else {\r\n        check = 'fa-circle';\r\n        done = '';\r\n        success = 'outline-success';\r\n    }\r\n    if (todo.isImportant) {\r\n        important = 'important';\r\n        warning = ' warning';\r\n    } else {\r\n        important = '';\r\n        warning = ' outline-warning';\r\n    }\r\n    const onUndo=(id)=>{\r\n        props.undo(id);\r\n        setNewName(todo.todoName);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card  m-2\">\r\n                <div className='card-body p-0'>\r\n                    <div className='d-flex flex-row justify-content-between align-items-center green'>\r\n                        <div className='col-sm-0.5 p-2 position-left' onClick={() => props.done(todo.todoId)}>\r\n                            <i className={`text-success p-2 position-left far ${check}`}></i>\r\n                        </div>\r\n                        {/*//////////////////UP_and_DOWN_group//////////////////////////////////////////////////////*/}\r\n                        <div className='col-sm-0.5 btn-group-vertical btn-sm'>\r\n                            <button className='btn btn-secondary btn-sm'\r\n                                    disabled={todo.isDisabledButtonUp}\r\n                                    onClick={() => props.todoMoveUp(todo.todoId)}>\r\n                                <i className=\"fas fa-sort-up\"></i>\r\n                            </button>\r\n                            <button className='btn btn-secondary btn-sm'\r\n                                    disabled={todo.isDisabledButtonDown}\r\n                                    onClick={() => props.todoMoveDown(todo.todoId)}>\r\n                                <i className=\"fas fa-sort-down\"></i>\r\n                            </button>\r\n                        </div>\r\n                        {/*//////////////////_TODO_TASK_/////////////////////////////////////////////////////*/}\r\n                        <div className='col-sm-9 '>\r\n                            {!todo.isEdit && <input type='text'\r\n                                                    className={`form-control border-0 ${done} ${important}`}\r\n                                                    value={todo.todoName}\r\n                                                    disabled={true}/>}\r\n                            {todo.isEdit && <input type='text'\r\n                                                   className={`form-control edit  ${done} ${important}`}\r\n                                                   value={newName}\r\n                                                   disabled={false}\r\n                                                   onChange={e => setNewName(e.target.value)}\r\n                                                   autoFocus/>}\r\n                        </div>\r\n                        {/*//////////////////_DONE<---->UNDO_/////////////////////////////////////////////////////*/}\r\n                        <div className='col-sm-2 d-flex flex-row align-items-center'>\r\n                            {!todo.isEdit && <button className={`col-sm-3 btn mr-1  ${success} `}\r\n                                                     onClick={() => props.done(todo.todoId)}>\r\n                                <i className=\"far fa-check-square \"></i>\r\n                            </button>}\r\n\r\n                            {todo.isEdit && <button className='col-sm-3 btn btn-outline-info mr-1 '\r\n                                                    onClick={() => onUndo(todo.todoId)}>\r\n                                <i className=\"fas fa-undo\"></i>\r\n                            </button>}\r\n                            {/*//////////////////_EDIT<---->SAVE_/////////////////////////////////////////////////////*/}\r\n                            <button className='col-sm-3 btn btn-outline-info mr-1 '\r\n                                    onClick={() => props.edit({\r\n                                        id: todo.todoId,\r\n                                        name: newName\r\n                                    })}>\r\n                                {!todo.isEdit && <i className=\"fas fa-edit\"></i>}\r\n                                {todo.isEdit && <i className=\"far fa-save\"></i>}\r\n                            </button>\r\n                            {/*//////////////////_DELETE_/////////////////////////////////////////////////////*/}\r\n                            {!todo.isEdit && <button className='col-sm-3 btn btn-outline-danger mr-1'\r\n                                    onClick={() => props.deleteTaskInfo({\r\n                                        id: todo.todoId,\r\n                                        name: todo.todoName\r\n                                    })}>\r\n                                <i className=\"far fa-trash-alt\"></i>\r\n                            </button>}\r\n                            {/*//////////////////_IMPORTANT_/////////////////////////////////////////////////////*/}\r\n                            {!todo.isEdit && <button className={`col-sm-3 btn ${warning}`}\r\n                                    onClick={() => props.important(todo.todoId)}>\r\n                                <i className=\"fas fa-exclamation\"></i>\r\n                            </button>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    done: todoDone,\r\n    important: todoImportant,\r\n    edit: todoEdit,\r\n    undo: todoUndoEdit,\r\n    deleteTaskInfo: todoTaskConfirmDelete,\r\n    todoMoveUp: todoMoveUp,\r\n    todoMoveDown: todoMoveDown,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListItem);","import TodoListItem from \"./todo-list-item\";\r\n\r\nexport default TodoListItem;","import TodoList from \"./todo-list\";\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport TodoListItem from \"../todo-list-item\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst TodoList = (props) => {\r\n    return (\r\n        <div>\r\n            {props.todoList.map(el => <TodoListItem key={el.todoId} todo={el}/>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nexport default connect(mapStateToProps,)(TodoList);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Button} from \"reactstrap\";\r\nimport {todoDelete, todoTaskDeleteCancel} from \"../../redux/actions\";\r\n\r\nconst DeleteConfirmationModal = (props) => {\r\n\r\n    return (\r\n        <Modal isOpen={Boolean(props.deleteTaskInfo.name)||props.deleteAllTasksConfirmed} toggle={props.todoTaskDeleteCancel}>\r\n            <ModalHeader className='text-danger'>{props.modal.header}</ModalHeader>\r\n            <ModalBody>\r\n                <strong>{props.deleteTaskInfo.name}</strong> {props.modal.body}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color='danger'\r\n                onClick={()=>props.todoDelete({\r\n                    id: props.deleteTaskInfo.id,\r\n                    deleteAll: props.deleteAllTasksConfirmed\r\n                })}>Delete</Button>\r\n                <Button\r\n                    onClick={props.todoTaskDeleteCancel}>Cancel</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n    deleteTaskInfo: state.todoTaskForDelete,\r\n    deleteAllTasksConfirmed: state.clearTodoList,\r\n    modal: state.deleteConfirmationModal\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    todoDelete: todoDelete,\r\n    todoTaskDeleteCancel: todoTaskDeleteCancel,\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(DeleteConfirmationModal);","import React, {useState} from \"react\";\r\nimport './todo-list-item-important.css'\r\nimport {connect} from \"react-redux\";\r\nimport { todoDone, todoEdit, todoImportant, todoTaskConfirmDelete, todoUndoEdit } from \"../../redux/actions\";\r\nimport DeleteConfirmationModal from \"../delete-confirmation-modal/delete-confirmation-modal\";\r\n\r\nconst TodoListItemImportant = (props) => {\r\n    const todo = props.todo;\r\n    const [newName, setNewName] = useState(todo.todoName);\r\n\r\n    let check, done, important, success, warning;\r\n    console.log('todo.isDone ',todo.isDone);\r\n    if (todo.isDone) {\r\n        check = 'fa-check-circle';\r\n        done = 'done';\r\n        success = ' success';\r\n        console.log('success=',success);\r\n    } else {\r\n        check = 'fa-circle';\r\n        done = '';\r\n        success = 'outline-success';\r\n    }\r\n    if (todo.isImportant) {\r\n        important = 'important';\r\n        warning = ' warning';\r\n    } else {\r\n        important = '';\r\n        warning = ' outline-warning';\r\n    }\r\n    const onUndo=(id)=>{\r\n        props.undo(id);\r\n        setNewName(todo.todoName);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card  m-2\">\r\n                <div className='card-body p-0'>\r\n                    <div className='d-flex flex-row justify-content-between align-items-center green'>\r\n                        <div className='col-sm-0.5 p-2 position-left' onClick={() => props.done(todo.todoId)}>\r\n                            <i className={`text-success p-2 position-left far ${check}`}></i>\r\n                        </div>\r\n                        {/*//////////////////_TODO_TASK_/////////////////////////////////////////////////////*/}\r\n                        <div className='col-sm-9 '>\r\n                            {!todo.isEdit && <input type='text'\r\n                                                    className={`form-control border-0 ${done} ${important}`}\r\n                                                    value={todo.todoName}\r\n                                                    disabled={true}/>}\r\n                            {todo.isEdit && <input type='text'\r\n                                                   className={`form-control edit  ${done} ${important}`}\r\n                                                   value={newName}\r\n                                                   disabled={false}\r\n                                                   onChange={e => setNewName(e.target.value)}\r\n                                                   autoFocus/>}\r\n                        </div>\r\n                        {/*//////////////////_DONE<---->UNDO_/////////////////////////////////////////////////////*/}\r\n                        <div className='col-sm-2 d-flex flex-row align-items-center'>\r\n                            {!todo.isEdit && <button className={`col-sm-3 btn mr-1  ${success} `}\r\n                                                     onClick={() => props.done(todo.todoId)}>\r\n                                <i className=\"far fa-check-square \"></i>\r\n                            </button>}\r\n\r\n                            {todo.isEdit && <button className='col-sm-3 btn btn-outline-info mr-1 '\r\n                                                    onClick={() => onUndo(todo.todoId)}>\r\n                                <i className=\"fas fa-undo\"></i>\r\n                            </button>}\r\n                            {/*//////////////////_EDIT<---->SAVE_/////////////////////////////////////////////////////*/}\r\n                            <button className='col-sm-3 btn btn-outline-info mr-1 '\r\n                                    onClick={() => props.edit({\r\n                                        id: todo.todoId,\r\n                                        name: newName\r\n                                    })}>\r\n                                {!todo.isEdit && <i className=\"fas fa-edit\"></i>}\r\n                                {todo.isEdit && <i className=\"far fa-save\"></i>}\r\n                            </button>\r\n                            {/*//////////////////_DELETE_/////////////////////////////////////////////////////*/}\r\n                            {!todo.isEdit && <button className='col-sm-3 btn btn-outline-danger mr-1'\r\n                                                     onClick={() => props.deleteTaskInfo({\r\n                                                         id: todo.todoId,\r\n                                                         name: todo.todoName\r\n                                                     })}>\r\n                                <i className=\"far fa-trash-alt\"></i>\r\n                            </button>}\r\n                            {/*//////////////////_IMPORTANT_/////////////////////////////////////////////////////*/}\r\n                            {!todo.isEdit && <button className={`col-sm-3 btn ${warning}`}\r\n                                                     onClick={() => props.important(todo.todoId)}>\r\n                                <i className=\"fas fa-exclamation\"></i>\r\n                            </button>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <DeleteConfirmationModal/>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    done: todoDone,\r\n    important: todoImportant,\r\n    edit: todoEdit,\r\n    undo: todoUndoEdit,\r\n    deleteTaskInfo: todoTaskConfirmDelete\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListItemImportant);","import React from \"react\";\r\nimport './important-tasks.css';\r\nimport {connect} from \"react-redux\";\r\nimport TodoListItemImportant from \"../todo-list-item-important/todo-list-item-important\";\r\n\r\nconst ImportantTasks = (props) => {\r\n    return (\r\n        <div className='mt-5'>\r\n            {props.todoList.filter(el=>el.isImportant===true).map(el => <TodoListItemImportant key={el.todoId} todo={el}/>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    todoList: state.todoList,\r\n});\r\n\r\nexport default connect(mapStateToProps,)(ImportantTasks);","import React from 'react';\nimport './App.css';\nimport TodoLoad from \"../todo-load\";\nimport TodoAdd from \"../todo-add\";\nimport TodoList from \"../todo-list\";\nimport DeleteConfirmationModal from \"../delete-confirmation-modal/delete-confirmation-modal\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport ImportantTasks from \"../important-tasks/important-tasks\";\n\nfunction App() {\n    return (\n        <Router>\n            <nav className='navbar navbar-expand-md navbar-dark fixed-top bg-dark'>\n                <div className=''>\n                    <ul className='nav flex-row'>\n                        <li className='nav-item mr-3'>\n                            <Link to=\"/react-redux-pasv-todo-list-app\">To Do</Link>\n                        </li>\n                        <li className='nav-item'>\n                            <Link to=\"/react-redux-pasv-todo-list-app/important\">Important Tasks</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n                    <Switch>\n                        <Route path=\"/react-redux-pasv-todo-list-app/important\">\n                            <ImportantTasks className='m-5'/>\n                        </Route>\n                        <Route path=\"/react-redux-pasv-todo-list-app\">\n                            <ToDo/>\n                        </Route>\n                    </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n\nfunction ToDo() {\n    return (\n            <div className=\"App\">\n                <br/>\n                <h1 align='left' className='p-2'> To Do List </h1>\n                <TodoLoad/>\n                <TodoAdd/>\n                <TodoList/>\n                <DeleteConfirmationModal/>\n            </div>\n        )\n}","import App from \"./App\";\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. app is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    todoList: [\r\n        {\r\n            todoId: 201,\r\n            todoName: 'todo 1',\r\n            isDone: false,\r\n            isEdit: false,\r\n            isImportant: false,\r\n            isDisabledButtonUp: true,\r\n            isDisabledButtonDown: false,\r\n        },\r\n        {\r\n            todoId: 202,\r\n            todoName: 'todo 2',\r\n            isDone: false,\r\n            isEdit: false,\r\n            isImportant: true,\r\n            isDisabledButtonUp: false,\r\n            isDisabledButtonDown: false,\r\n        },\r\n        {\r\n            todoId: 203,\r\n            todoName: 'todo 3',\r\n            isDone: false,\r\n            isEdit: false,\r\n            isImportant: false,\r\n            isDisabledButtonUp: false,\r\n            isDisabledButtonDown: false,\r\n        },\r\n        {\r\n            todoId: 204,\r\n            todoName: 'todo 4',\r\n            isDone: false,\r\n            isEdit: false,\r\n            isImportant: false,\r\n            isDisabledButtonUp: false,\r\n            isDisabledButtonDown: true,\r\n        }\r\n    ],\r\n\r\n    deleteConfirmationModal: {header: 'Delete Task', body: ' will be permanently deleted'},\r\n    todoTaskForDelete: {id: '', name: ''},\r\n    clearTodoList: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'TODO_DONE':\r\n            return {\r\n                ...state,\r\n                todoList: [...state.todoList.map(el => {\r\n                    if (el.todoId === action.payload) {\r\n                        return {...el, isDone: !el.isDone}\r\n                    } else\r\n                        return {...el}\r\n                })]\r\n            };\r\n\r\n        case 'TODO_IMPORTANT':\r\n            return {\r\n                ...state,\r\n                todoList: [...state.todoList.map(el => {\r\n                    if (el.todoId === action.payload) {\r\n                        return {...el, isImportant: !el.isImportant}\r\n                    } else\r\n                        return {...el}\r\n                })]\r\n            };\r\n\r\n        case 'TODO_EDIT':\r\n            return {\r\n                ...state,\r\n                todoList: [...state.todoList.map(el => {\r\n                    if (el.todoId === action.payload.id) {\r\n                        return {...el, isEdit: !el.isEdit, todoName: action.payload.name}\r\n                    } else\r\n                        return {...el}\r\n                })]\r\n            };\r\n\r\n        case 'TODO_UNDO_EDIT':\r\n            return {\r\n                ...state,\r\n                todoList: [...state.todoList.map(el => {\r\n                    if (el.todoId === action.payload) {\r\n                        console.log('HERE');\r\n                        return {...el, isEdit: !el.isEdit}\r\n                    } else\r\n                        return {...el}\r\n                })]\r\n            };\r\n\r\n        case 'TODO_ADD':\r\n            return {\r\n                ...state,\r\n                todoList: [\r\n                    ...disabledLastButtonDown([...state.todoList]),\r\n                    (()=>{if ([...state.todoList].length===0){          //if we add to an empty list both buttons are disabled\r\n                        return {\r\n                            todoId: getRandomInt(204, 1000),\r\n                            todoName: action.payload,\r\n                            isDone: false,\r\n                            isEdit: false,\r\n                            isImportant: false,\r\n                            isDisabledButtonUp: true,\r\n                            isDisabledButtonDown: true}\r\n                        }else {\r\n                        return {\r\n                            todoId: getRandomInt(204, 1000),\r\n                            todoName: action.payload,\r\n                            isDone: false,\r\n                            isEdit: false,\r\n                            isImportant: false,\r\n                            isDisabledButtonUp: false,\r\n                            isDisabledButtonDown: true\r\n                        }}\r\n                    })()\r\n                ]\r\n            };\r\n        case 'TODO_LOAD':\r\n            return {\r\n                ...state,\r\n                todoList: (() => {\r\n                    const newList = [\r\n                        ...disabledLastButtonDown([...state.todoList]), //Before load an external list disable Last Button Down\r\n                        ...action.payload.map(el => (\r\n                            {\r\n                                todoId: el.id,\r\n                                todoName: el.title,\r\n                                isDone: el.completed,\r\n                                isEdit: false,\r\n                                isImportant: false,\r\n                                isDisabledButtonUp: false,\r\n                                isDisabledButtonDown: false,\r\n                            }))\r\n                    ];\r\n                    newList[0].isDisabledButtonUp = true; //If we add an external list to an empty list\r\n                    newList[newList.length-1].isDisabledButtonDown = true;\r\n                    return newList\r\n                })()\r\n            };\r\n\r\n        case 'TODO_TASK_CONFIRM_DELETE':\r\n            return {\r\n                ...state,\r\n                todoTaskForDelete: action.payload,\r\n                deleteConfirmationModal: initialState.deleteConfirmationModal\r\n            };\r\n\r\n        case 'TODO_LIST_CONFIRM_DELETE_ALL':\r\n            return {\r\n                ...state,\r\n                clearTodoList: true,\r\n                deleteConfirmationModal: {header: 'Delete Tasks', body: 'All tasks will be permanently deleted'}\r\n            };\r\n\r\n        case 'TODO_TASK_DELETE':\r\n            return {\r\n                ...state,\r\n                todoList: state.todoList.filter(el => el.todoId !== action.payload),\r\n                todoTaskForDelete: initialState.todoTaskForDelete\r\n            };\r\n\r\n        case 'TODO_TASK_DELETE_ALL':\r\n            return {\r\n                ...state,\r\n                todoList: [],\r\n                todoTaskForDelete: initialState.todoTaskForDelete,\r\n                clearTodoList: false,\r\n            };\r\n\r\n        case 'TODO_TASK_DELETE_CANCEL':\r\n            return {\r\n                ...state,\r\n                todoTaskForDelete: initialState.todoTaskForDelete,\r\n                clearTodoList: false\r\n            };\r\n\r\n        case 'TODO_UP':\r\n            return {\r\n                ...state,\r\n                todoList: up([...state.todoList], action.payload)\r\n            };\r\n\r\n        case 'TODO_DOWN':\r\n            return {\r\n                ...state,\r\n                todoList: down([...state.todoList], action.payload)\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nfunction up(todoList, id) {\r\n    const idx = todoList.findIndex(el => el.todoId === id); //Assume idx > 0. You cannot go Up for first task\r\n    const newList = [...todoList];\r\n\r\n    newList.splice(idx, 1);\r\n    newList.splice(idx - 1, 0, todoList[idx]);\r\n    if (todoList.length === 2) {\r\n        newList[0].isDisabledButtonUp = true;\r\n        newList[0].isDisabledButtonDown = false;\r\n        newList[1].isDisabledButtonUp = false;\r\n        newList[1].isDisabledButtonDown = true;\r\n    } else {\r\n        if (idx === 1) {\r\n            newList[0].isDisabledButtonUp = true;\r\n            newList[1].isDisabledButtonUp = false;\r\n        } else if (idx === newList.length - 1) {\r\n            newList[idx - 1].isDisabledButtonDown = false;\r\n            newList[idx].isDisabledButtonDown = true;\r\n        }\r\n    }\r\n\r\n    return newList\r\n}\r\n\r\nfunction down(todoList, id) {\r\n    const idx = todoList.findIndex(el => el.todoId === id);\r\n    if (idx < todoList.length - 1) {\r\n        const newList = [...todoList];\r\n        newList.splice(idx, 1);\r\n        newList.splice(idx + 1, 0, todoList[idx]);\r\n        if (todoList.length === 2) {\r\n            newList[0].isDisabledButtonUp = true;\r\n            newList[0].isDisabledButtonDown = false;\r\n            newList[1].isDisabledButtonUp = false;\r\n            newList[1].isDisabledButtonDown = true;\r\n        } else {\r\n            if (idx === 0) {\r\n                newList[0].isDisabledButtonUp = true;\r\n                newList[1].isDisabledButtonUp = false;\r\n            } else if (idx === newList.length - 2) {\r\n                newList[idx].isDisabledButtonDown = false;\r\n                newList[idx + 1].isDisabledButtonDown = true;\r\n            }\r\n        }\r\n        return newList\r\n    }\r\n}\r\n\r\nfunction disabledLastButtonDown(todoList) {\r\n    return todoList.map(todo => {\r\n        if (todoList.findIndex(el => el.todoId === todo.todoId) === todoList.length - 1) {\r\n            return {...todo, isDisabledButtonDown: false}\r\n        } else\r\n            return {...todo}\r\n    });\r\n}\r\n//\r\n// if (todoList.findIndex(el => el.todoId === todo.todoId) === 0) {\r\n//     return {...todo, isDisabledButtonUp: true}\r\n// }else","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/app\";\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport {\n    BrowserRouter as Router,\n    Route,\n} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Route path=\"/\" component={App} />\n            {/*<App/>*/}\n        </Router>\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}